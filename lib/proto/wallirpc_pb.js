/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.exportSymbol('proto.wallirpc.GetInfoRequest', null, global);
goog.exportSymbol('proto.wallirpc.GetInfoResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wallirpc.GetInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wallirpc.GetInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.wallirpc.GetInfoRequest.displayName = 'proto.wallirpc.GetInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wallirpc.GetInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wallirpc.GetInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wallirpc.GetInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wallirpc.GetInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wallirpc.GetInfoRequest}
 */
proto.wallirpc.GetInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wallirpc.GetInfoRequest;
  return proto.wallirpc.GetInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wallirpc.GetInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wallirpc.GetInfoRequest}
 */
proto.wallirpc.GetInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wallirpc.GetInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wallirpc.GetInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wallirpc.GetInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wallirpc.GetInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wallirpc.GetInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wallirpc.GetInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.wallirpc.GetInfoResponse.displayName = 'proto.wallirpc.GetInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wallirpc.GetInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wallirpc.GetInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wallirpc.GetInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wallirpc.GetInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    protocolversion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blocks: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeoffset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    connections: jspb.Message.getFieldWithDefault(msg, 5, 0),
    proxy: jspb.Message.getFieldWithDefault(msg, 6, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 7, ""),
    testnet: jspb.Message.getFieldWithDefault(msg, 8, false),
    relayfee: +jspb.Message.getFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wallirpc.GetInfoResponse}
 */
proto.wallirpc.GetInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wallirpc.GetInfoResponse;
  return proto.wallirpc.GetInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wallirpc.GetInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wallirpc.GetInfoResponse}
 */
proto.wallirpc.GetInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolversion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlocks(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeoffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnections(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProxy(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRelayfee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wallirpc.GetInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wallirpc.GetInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wallirpc.GetInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wallirpc.GetInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProtocolversion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBlocks();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTimeoffset();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getConnections();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getProxy();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTestnet();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRelayfee();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.wallirpc.GetInfoResponse.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.wallirpc.GetInfoResponse.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 protocolversion = 2;
 * @return {number}
 */
proto.wallirpc.GetInfoResponse.prototype.getProtocolversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.wallirpc.GetInfoResponse.prototype.setProtocolversion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 blocks = 3;
 * @return {number}
 */
proto.wallirpc.GetInfoResponse.prototype.getBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.wallirpc.GetInfoResponse.prototype.setBlocks = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 timeoffset = 4;
 * @return {number}
 */
proto.wallirpc.GetInfoResponse.prototype.getTimeoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.wallirpc.GetInfoResponse.prototype.setTimeoffset = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 connections = 5;
 * @return {number}
 */
proto.wallirpc.GetInfoResponse.prototype.getConnections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.wallirpc.GetInfoResponse.prototype.setConnections = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string proxy = 6;
 * @return {string}
 */
proto.wallirpc.GetInfoResponse.prototype.getProxy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.wallirpc.GetInfoResponse.prototype.setProxy = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string difficulty = 7;
 * @return {string}
 */
proto.wallirpc.GetInfoResponse.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.wallirpc.GetInfoResponse.prototype.setDifficulty = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool testnet = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.wallirpc.GetInfoResponse.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.wallirpc.GetInfoResponse.prototype.setTestnet = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float relayfee = 9;
 * @return {number}
 */
proto.wallirpc.GetInfoResponse.prototype.getRelayfee = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.wallirpc.GetInfoResponse.prototype.setRelayfee = function(value) {
  jspb.Message.setField(this, 9, value);
};


goog.object.extend(exports, proto.wallirpc);
